package com.axone_io.ignition.git;

import com.inductiveautomation.ignition.designer.gui.CommonUI;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.io.InputStream;

public class PullPopup extends JFrame {
    private final Logger logger = LoggerFactory.getLogger(getClass());
    private JCheckBox imagesCheckBox;
    private JCheckBox themesCheckBox;
    private JCheckBox tagsCheckBox;
    private JButton cancelButton;
    private JLabel actionLabel;
    private JButton pullAndImportButton;
    private JPanel btnPanel;
    private JPanel mainPanel;

    public PullPopup(Component parent) {
        try {
            InputStream commitIconStream = getClass().getResourceAsStream("/com/axone_io/ignition/git/icons/ic_commit.svg");
            ImageIcon commitIcon = new ImageIcon(ImageIO.read(commitIconStream));
            setIconImage(commitIcon.getImage());
        } catch (IOException e) {
            logger.trace(e.toString(), e);
        }
        setContentPane(mainPanel);
        setTitle("Pull Settings");
        setSize(300, 200);
        setMinimumSize(new Dimension(300, 200));
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setVisible(true);

        cancelButton.addActionListener(e -> this.dispose());

        pullAndImportButton.addActionListener(e -> {
            this.onPullAction(
                    this.tagsCheckBox.isSelected(),
                    this.themesCheckBox.isSelected(),
                    this.imagesCheckBox.isSelected());
            this.dispose();
        });

        CommonUI.centerComponent(this, parent);
        toFront();
    }

    public void resetCheckboxes() {
        this.tagsCheckBox.setSelected(false);
        this.themesCheckBox.setSelected(false);
        this.imagesCheckBox.setSelected(false);
    }

    public void onPullAction(boolean importTags, boolean importTheme, boolean importImages) {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(6, 1, new Insets(5, 5, 5, 5), -1, -1));
        mainPanel.setMinimumSize(new Dimension(300, 175));
        actionLabel = new JLabel();
        actionLabel.setText("Do you also wish to import the following:");
        mainPanel.add(actionLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        imagesCheckBox = new JCheckBox();
        imagesCheckBox.setText("Images");
        mainPanel.add(imagesCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        themesCheckBox = new JCheckBox();
        themesCheckBox.setText("Themes");
        mainPanel.add(themesCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tagsCheckBox = new JCheckBox();
        tagsCheckBox.setSelected(false);
        tagsCheckBox.setText("Tags");
        mainPanel.add(tagsCheckBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnPanel = new JPanel();
        btnPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        mainPanel.add(btnPanel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, true));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        btnPanel.add(cancelButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pullAndImportButton = new JButton();
        pullAndImportButton.setBackground(new Color(-11555609));
        pullAndImportButton.setForeground(new Color(-1));
        pullAndImportButton.setText("Pull and Import");
        btnPanel.add(pullAndImportButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
